{"version":3,"sources":["components/InProgBtn.jsx","components/CompleteBtn.jsx","components/RemoveBtn.jsx","components/ProjectTable.jsx","views/Main.jsx","views/ProjectForm.jsx","App.js","serviceWorker.js","index.js"],"names":["props","projectId","useState","projectStatus","onClick","e","preventDefault","axios","put","then","res","console","log","data","onUpdate","catch","err","type","className","delete","projects","setProjects","fetchProjects","get","isPast","date","Date","toDateString","useEffect","id","filter","map","i","key","projectTitle","dueDate","style","color","moment","format","InProgBtn","_id","CompleteBtn","RemoveBtn","loaded","SetLoaded","Axios","ProjectTable","to","setProjectTitle","setDueDate","errors","setErrors","onSubmit","post","navigate","name","onChange","target","value","required","message","App","ProjectForm","path","Main","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.a2bf0bcd.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport { navigate } from '@reach/router';\r\n\r\nexport default props => {\r\n  const {projectId} = props;\r\n  const [projectStatus, setProjectStatus ] = useState(\"2\");\r\n  \r\n  const statusUpdate = e=> {\r\n    e.preventDefault();\r\n    axios.put('http://localhost:8000/project/' + projectId, {\r\n      projectStatus\r\n    })\r\n      .then(res => {\r\n        console.log(res.data);\r\n        props.onUpdate();\r\n      })\r\n      .catch( err => console.log(err))\r\n  }\r\n\r\n  return ( \r\n    <button onClick={statusUpdate}\r\n    type=\"button\" className=\"btn btn-dark\"\r\n    >\r\n      Begin\r\n    </button>\r\n  )\r\n}","import React, {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default props => {\r\n  const {projectId} = props;\r\n  const [projectStatus, setProjectStatus ] = useState(\"3\");\r\n  \r\n  const statusUpdate = e=> {\r\n    e.preventDefault();\r\n    axios.put('http://localhost:8000/project/' + projectId, {\r\n      projectStatus\r\n    })\r\n      .then(res => {\r\n        console.log(res.data);\r\n        props.onUpdate();\r\n      })\r\n      .catch( err => console.log(err))\r\n  }\r\n\r\n  return ( \r\n    <button onClick={statusUpdate}\r\n    type=\"button\" className=\"btn btn-dark\"\r\n    >\r\n      Complete\r\n    </button>\r\n  )\r\n}","import React, {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default props => {\r\n  const {projectId} = props;\r\n  \r\n  const statusUpdate = e=> {\r\n    e.preventDefault();\r\n    axios.delete('http://localhost:8000/project/' + projectId)\r\n      .then(res => {\r\n        console.log(res.data);\r\n        props.onUpdate();\r\n      })\r\n      .catch( err => console.log(err))\r\n  }\r\n\r\n  return ( \r\n    <button onClick={statusUpdate}\r\n    type=\"button\" className=\"btn btn-dark\"\r\n    >\r\n      Remove\r\n    </button>\r\n  )\r\n}","import React, { useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport InProgBtn from'../components/InProgBtn';\r\nimport CompleteBtn from '../components/CompleteBtn';\r\nimport RemoveBtn from '../components/RemoveBtn';\r\nimport moment from 'moment';\r\n\r\n\r\nexport default props => {\r\n  const [ projects, setProjects ] = useState([]);\r\n\r\n  const fetchProjects = () => {\r\n    axios.get('http://localhost:8000/project')\r\n      .then( res => setProjects(res.data))\r\n      .catch( err => console.log(err))\r\n    }\r\n    useEffect( () => {\r\n      fetchProjects();\r\n  }, [])\r\n\r\n  function isPast(date) {\r\n    return new Date(date) < new Date( new Date().toDateString() );\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <div className=\"row\" id=\"tblRow\" >\r\n      <div className = \"col-sm tblCol col1\" >\r\n        <h5 className=\"col1\" >Get Started</h5>\r\n      {projects.filter(projects => projects.projectStatus === \"1\").map((projects, i) => \r\n        <div className=\"card allCard\" key = {i} >\r\n          <div className=\"card-body allCard\">\r\n            <h5 className=\"card-title allCard\">{projects.projectTitle}</h5>\r\n            {isPast(projects.dueDate) ? \r\n            <p style={{color:\"red\"}} className =\"allCard\">{moment(projects.dueDate).format(\"MM-DD-YYYY\")}</p> :\r\n            <p className =\"allCard\">{moment(projects.dueDate).format(\"MM-DD-YYYY\")}</p> \r\n            }\r\n            <InProgBtn\r\n            projectId={projects._id}\r\n            onUpdate = {fetchProjects}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}  \r\n      </div>\r\n      <div className = \"col-sm tblCol col2\" >\r\n        <h5 className=\"col2\">In Progress</h5>\r\n      {projects.filter(projects => projects.projectStatus === \"2\").map((projects, i) => \r\n        <div className=\"card allCard\" key = {i} >\r\n          <div className=\"card-body allCard\">\r\n            <h5 className=\"card-title allCard\">{projects.projectTitle}</h5>\r\n            {isPast(projects.dueDate) ? \r\n            <p style={{color:\"red\"}} className =\"allCard\">{moment(projects.dueDate).format(\"MM-DD-YYYY\")}</p> :\r\n            <p className =\"allCard\">{moment(projects.dueDate).format(\"MM-DD-YYYY\")}</p> \r\n            }\r\n            <CompleteBtn\r\n            projectId={projects._id}\r\n            onUpdate = {fetchProjects}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}  \r\n      </div>\r\n      <div className = \"col-sm tblCol col3\" >\r\n        <h5 className= \"col3\">Completed</h5>\r\n        {projects.filter(projects => projects.projectStatus === \"3\").map((projects, i) => \r\n          <div className=\"card allCard\" key = {i} >\r\n            <div className=\"card-body allCard\">\r\n              <h5 className=\"card-title allCard\">{projects.projectTitle}</h5>\r\n              {isPast(projects.dueDate) ? \r\n                <p style={{color:\"red\"}} className =\"allCard\">{moment(projects.dueDate).format(\"MM-DD-YYYY\")}</p> :\r\n                 <p className =\"allCard\">{moment(projects.dueDate).format(\"MM-DD-YYYY\")}</p> \r\n              }\r\n              <RemoveBtn\r\n            projectId={projects._id}\r\n            onUpdate = {fetchProjects}\r\n            />\r\n            </div>\r\n          </div>\r\n        )}   \r\n      </div>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Link } from '@reach/router';\r\nimport ProjectTable from '../components/ProjectTable'\r\nimport Axios from 'axios';\r\n\r\nexport default () => {\r\n\r\n    const [projects, setProjects] = useState([]);\r\n    const [ loaded, SetLoaded] = useState(false);\r\n\r\n  useEffect( () => {\r\n    Axios.get('http://localhost:8000/project')\r\n    .then( res => {\r\n      setProjects(res.data);\r\n      SetLoaded(true);\r\n    })\r\n  })\r\n  return(\r\n  <>\r\n  <div id=\"main\" className=\"container\">\r\n      {loaded &&(\r\n        <ProjectTable/>\r\n        )}\r\n        <br />\r\n        <Link to=\"/create\">\r\n          <button type=\"button\" className=\"btn btn-secondary\">\r\n            Create a Project\r\n          </button>\r\n        </Link>\r\n    </div>\r\n  </>\r\n  )\r\n}","import React, { useState, useEffect } from  'react';\r\nimport axios from 'axios';\r\nimport { navigate } from '@reach/router';\r\n\r\nexport default props => {\r\n    const [ projectTitle, setProjectTitle ] = useState(\"\");\r\n    const [ dueDate, setDueDate ] = useState();\r\n    // Project dude date data type??\r\n    const [ projectStatus, setProjectStatus] = useState(\"1\");\r\n    const [ errors, setErrors ] = useState({});\r\n\r\n\r\n    const submitHandler = e => {\r\n        e.preventDefault();\r\n        axios.post('http://localhost:8000/project', {\r\n            projectTitle,\r\n            dueDate,\r\n            projectStatus\r\n        })\r\n            .then( res => {\r\n                if(res.data.errors){\r\n                    console.log(res.data.errors);\r\n                    setErrors(res.data.errors);\r\n                }\r\n                else{\r\n                    console.log(res.data)\r\n                  navigate('/');\r\n                }\r\n            })\r\n            .catch(err => console.log(err))\r\n    }\r\n    return ( \r\n        <>\r\n        <form onSubmit = {submitHandler}>\r\n          <label>Project Title: </label>\r\n          <input \r\n            type=\"text\" \r\n            className=\"form-control\"\r\n            name =\"projectTitle\"\r\n            onChange = { (e) => setProjectTitle(e.target.value)}\r\n            required\r\n          />\r\n          <p>{errors.projectTitle ? errors.projectTitle.message : \"\"}</p>\r\n          <label>Due Date:</label>\r\n          <input \r\n            type=\"date\" \r\n            className=\"form-control\"\r\n            name = \"dueDate\"\r\n            onChange = { (e) => setDueDate(e.target.value)}\r\n            required\r\n          />\r\n          <p>{errors.dueDate ? errors.dueDate.message : \"\"}</p>\r\n          <input\r\n            type=\"submit\"\r\n            className=\"btn btn-primary\"\r\n          />\r\n        </form>\r\n        </>\r\n    )\r\n}","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Router } from '@reach/router';\nimport Main from './views/Main';\nimport ProjectForm from './views/ProjectForm';\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"container-fluid\" id=\"full\">\n      <div>\n        <h1>Project Manager</h1>\n        <Router>\n          <ProjectForm path = '/create'/>\n          <Main path ='/'/>\n        </Router>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}